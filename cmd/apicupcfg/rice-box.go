// Code generated by rice embed-go; DO NOT EDIT.
package main

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file2 := &embedded.EmbeddedFile{
		Filename:    "analytics-k8s.tmpl",
		FileModTime: time.Unix(1569941485, 0),

		Content: string("{{$subsys := .SubsysName}}\n\n{{$pathsep := .OsEnv.PathSeparator}}\n{{$apicup := .OsEnv.BinApicup}}\n\n{{ template \"scriptheader\" .OsEnv }}\n\n{{$apicup}} subsys create {{$subsys}} analytics --k8s\n\n{{ if len .ExtraValuesFile -}}\n{{$apicup}} subsys set {{$subsys}} extra-values-file=..{{$pathsep}}{{ .ExtraValuesFile }}\n{{ end -}}\n\n{{$apicup}} subsys set {{$subsys}} analytics-ingestion={{.AnalyticsIngestionEndpoint}}\n{{$apicup}} subsys set {{$subsys}} analytics-client={{.AnalyticsClientEndpoint}}\n{{$apicup}} subsys set {{$subsys}} namespace={{.Namespace}}\n{{$apicup}} subsys set {{$subsys}} registry={{.RegistryUrl}}\n{{$apicup}} subsys set {{$subsys}} registry-secret={{.RegistrySecret}}\n\n{{/* default 6, recommended minimum 12 */}}\n{{$apicup}} subsys set {{$subsys}} coordinating-max-memory-gb={{.CoordinatingMaxMemoryGb | default 12}}\n{{/* default 6, recommended minimum 12 */}}\n{{$apicup}} subsys set {{$subsys}} data-max-memory-gb={{.DataMaxMemoryGb | default 12}}\n{{/* default 200, minimum 200, this is per pod, 3 pods: 600gb */}}\n{{$apicup}} subsys set {{$subsys}} data-storage-size-gb={{.DataStorageSizeGb | default 200}}\n{{/* miminum 12 */}}\n{{$apicup}} subsys set {{$subsys}} master-max-memory-gb={{.MasterMaxMemoryGb | default 12}}\n{{/* minimum 5 */}}\n{{$apicup}} subsys set {{$subsys}} master-storage-size-gb={{.MasterStorageSizeGb | default 5}}\n\n{{$apicup}} subsys set {{$subsys}} enable-message-queue={{.EnableMessageQueue | default false}}\n\n{{$apicup}} subsys set {{$subsys}} storage-class={{.StorageClass}}\n{{ if len .EsStorageClass }}\n{{$apicup}} subsys set {{$subsys}} es-storage-class={{.EsStorageClass}}\n{{end}}\n{{ if len .MqStorageClass }}\n{{$apicup}} subsys set {{$subsys}} mq-storage-class={{.MqStorageClass}}\n{{end}}\n\n{{$apicup}} subsys set {{$subsys}} mode={{.Mode}}\n{{$apicup}} subsys set {{$subsys}} ingress-type={{.IngressType}}\n"),
	}
	file3 := &embedded.EmbeddedFile{
		Filename:    "analytics-vm.tmpl",
		FileModTime: time.Unix(1569941484, 0),

		Content: string("{{$subsys := .SubsysName}}\n\n{{$pathsep := .OsEnv.PathSeparator}}\n{{$apicup := .OsEnv.BinApicup}}\n{{$islinux := .OsEnv.IsLinux}}\n\n{{ template \"scriptheader\" .OsEnv }}\n\n{{ $apicup }} subsys create {{ $subsys }} analytics\n{{ $apicup }} subsys set {{ $subsys }} mode={{ .Mode }}\n\n{{ with .CloudInit }}\n{{ if len .CloudInitFile }}\n    {{ $apicup }} subsys set {{ $subsys }} additional-cloud-init-file=..{{$pathsep}}{{ .CloudInitFile }}\n{{ end }}\n{{- end }}\n\n{{ $apicup }} subsys set {{ $subsys }} analytics-ingestion={{ .AnalyticsIngestion }}\n{{ $apicup }} subsys set {{ $subsys }} analytics-client={{ .AnalyticsClient }}\n\n{{ $apicup }} subsys set {{ $subsys }} search-domain={{ join \",\" .SearchDomains | trim | quote }}\n\n{{ $apicup }} subsys set {{ $subsys }} ssh-keyfiles=..{{$pathsep}}{{ .SshPublicKeyFile }}\n\n{{ with .VmFirstBoot }}\n{{ $apicup }} subsys set {{ $subsys }} dns-servers={{ join \",\" .DnsServers | trim | quote }}\n\n{{ if $islinux }}\n    {{ $apicup }} subsys set {{ $subsys }} default-password={{ .VmwareConsolePasswordHash | squote }}\n{{ else}}\n    {{ $apicup }} subsys set {{ $subsys }} default-password={{ .VmwareConsolePasswordHash | quote }}\n{{end}}\n\n{{ with .IpRanges }}\n{{ if len .PodNetwork }}\n    {{ $apicup }} subsys set {{ $subsys }} k8s-pod-network={{ .PodNetwork | quote }}\n{{- end}}\n{{ if len .ServiceNetwork }}\n    {{ $apicup }} subsys set {{ $subsys }} k8s-service-network={{ .ServiceNetwork | quote }}\n{{- end}}\n{{- end}}\n\n{{- range .Hosts}}\n{{$h := .}}\n{{ $apicup }} hosts create {{$subsys}} {{$h.Name}} {{$h.HardDiskPassword}}\n{{ $apicup }} iface create {{$subsys}} {{$h.Name}} {{$h.Device}} {{$h.IpAddress}}/{{$h.SubnetMask}} {{$h.Gateway}}\n{{- end}}\n\n{{- end}}\n\n{{ $apicup }} subsys set {{ $subsys }} enable-message-queue={{ .EnableMessageQueue }}\n"),
	}
	file4 := &embedded.EmbeddedFile{
		Filename:    "cloud-init-vm.tmpl",
		FileModTime: time.Unix(1573373916, 0),

		Content: string("{{- $a := list 0 . }}\r\n{{- template \"map2yml\" $a }}\r\n"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "combined-csr.tmpl",
		FileModTime: time.Unix(1569965821, 0),

		Content: string("{{$pathsep := .OsEnv.PathSeparator}}\n{{$shellext := .OsEnv.ShellExt}}\n{{$scriptinvoke := .OsEnv.ScriptInvoke}}\n\n{{ template \"scriptheader1\" .OsEnv }}\n\n{{ range $k, $cs := .CertSpecs }}\n    {{$scriptinvoke}} .{{$pathsep}}{{$cs.CsrConf}}{{$shellext}}\n{{ end }}\n"),
	}
	file6 := &embedded.EmbeddedFile{
		Filename:    "csr-client-auth.tmpl",
		FileModTime: time.Unix(1573621390, 0),

		Content: string("[req]\r\n# default key length for rsa key\r\ndefault_bits = 2048\r\n\r\n# do not encrypt private key\r\nencrypt_key = no\r\nencrypt_rsa_key = no\r\n\r\n# default message digest alg for signing certs and cert reqs\r\ndefault_md = sha256\r\n\r\n# cert request extensions section\r\nreq_extensions = req_ext\r\n\r\n# self-signed cert extensions section\r\nx509_extensions = req_ext\r\n\r\n# do not prompt for the dn\r\nprompt = no\r\n\r\n# section name for dn fields\r\ndistinguished_name = dn\r\n\r\n# make sure dn components match ca policy\r\n[dn]\r\n{{- range .DnFields | reverse }}\r\n    {{- nindent 0 . }}\r\n{{- end }}\r\nCN = {{ .Cn }}\r\n\r\n[req_ext]\r\nextendedKeyUsage = clientAuth\r\n"),
	}
	file7 := &embedded.EmbeddedFile{
		Filename:    "csr-server-auth.tmpl",
		FileModTime: time.Unix(1573621390, 0),

		Content: string("[req]\r\n# default key length for rsa key\r\ndefault_bits = 2048\r\n\r\n# do not encrypt private key\r\nencrypt_key = no\r\nencrypt_rsa_key = no\r\n\r\n# default message digest alg for signing certs and cert reqs\r\ndefault_md = sha256\r\n\r\n# cert request extensions section\r\nreq_extensions = req_ext\r\n\r\n# self-signed cert extensions section\r\nx509_extensions = req_ext\r\n\r\n# do not prompt for the dn\r\nprompt = no\r\n\r\n# section name for dn fields\r\ndistinguished_name = dn\r\n\r\n# make sure dn components match ca policy\r\n[dn]\r\n{{- range .DnFields | reverse }}\r\n    {{- nindent 0 . }}\r\n{{- end }}\r\nCN = {{ .Cn }}\r\n\r\n[req_ext]\r\nextendedKeyUsage = serverAuth\r\n# update subject alt name\r\n{{- if len .AltCns }}\r\nsubjectAltName = DNS:{{.Cn}},DNS:{{ join \",DNS:\" .AltCns }}\r\n{{- else }}\r\nsubjectAltName = DNS:{{.Cn}}\r\n{{- end }}"),
	}
	file8 := &embedded.EmbeddedFile{
		Filename:    "csr-server-client-eku.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("[req]\r\n# default key length for rsa key\r\ndefault_bits = 2048\r\n\r\n# do not encrypt private key\r\nencrypt_key = no\r\nencrypt_rsa_key = no\r\n\r\n# default message digest alg for signing certs and cert reqs\r\ndefault_md = sha256\r\n\r\n# cert request extensions section\r\nreq_extensions = req_ext\r\n\r\n# self-signed cert extensions section\r\nx509_extensions = req_ext\r\n\r\n# do not prompt for the dn\r\nprompt = no\r\n\r\n# section name for dn fields\r\ndistinguished_name = dn\r\n\r\n# make sure dn components match ca policy\r\n[dn]\r\n{{- range .DnFields | reverse }}\r\n    {{- nindent 0 . }}\r\n{{- end }}\r\nCN = {{ .Cn }}\r\n\r\n[req_ext]\r\nextendedKeyUsage = serverAuth,clientAuth\r\n# update subject alt name\r\n{{- if len .AltCns }}\r\n    subjectAltName = DNS:{{.Cn}},DNS:{{ join \",DNS:\" .AltCns }}\r\n{{- else }}\r\n    subjectAltName = DNS:{{.Cn}}\r\n{{- end }}"),
	}
	file9 := &embedded.EmbeddedFile{
		Filename:    "dp-apic-gw-service.tmpl",
		FileModTime: time.Unix(1575305637, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <APIConnectGatewayService name=\"{{.Name}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>APIC gw service</UserSummary>\r\n                    <LocalAddress>{{.LocalAddress}}</LocalAddress>\r\n                    <LocalPort>{{.LocalPort}}</LocalPort>\r\n                    <SSLClient>{{.SSLClientProfile}}</SSLClient>\r\n                    <SSLServer>{{.SSLServerProfile}}</SSLServer>\r\n                    <APIGatewayAddress>{{.ApiGateway}}</APIGatewayAddress>\r\n                    <APIGatewayPort>{{.ApiGatewayPort}}</APIGatewayPort>\r\n                    <GatewayPeeringManager>{{.GwPeeringManager}}</GatewayPeeringManager>\r\n                    <V5CompatibilityMode>off</V5CompatibilityMode>\r\n                    <UserDefinedPolicies></UserDefinedPolicies>\r\n                    <V5CSlmMode>autounicast</V5CSlmMode>\r\n                    <IPMulticast></IPMulticast>\r\n                    <IPUnicast></IPUnicast>\r\n                </APIConnectGatewayService>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filea := &embedded.EmbeddedFile{
		Filename:    "dp-config-sequence.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain | default \"apiconnect\"}}\">\r\n            <ma:set-config>\r\n                <ConfigSequence name=\"{{.ConfigSequenceName | default \"apiconnect\"}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>API Connect Configuration</UserSummary>\r\n                    <Locations>\r\n                        <Directory>local:///</Directory>\r\n                        <AccessProfileName/>\r\n                    </Locations>\r\n                    <MatchPattern>(.*)\\.cfg$</MatchPattern>\r\n                    <ResultNamePattern>$1.log</ResultNamePattern>\r\n                    <StatusNamePattern>$1.status</StatusNamePattern>\r\n                    <Watch>on</Watch>\r\n                    <UseOutputLocation>off</UseOutputLocation>\r\n                    <OutputLocation>logtemp:///</OutputLocation>\r\n                    <DeleteUnused>on</DeleteUnused>\r\n                    <RunSequenceInterval>{{.ConfigurationExecutionInterval | default 3000}}</RunSequenceInterval>\r\n                </ConfigSequence>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>"),
	}
	fileb := &embedded.EmbeddedFile{
		Filename:    "dp-crypto-certificate.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <CryptoCertificate name=\"{{.CryptoCertName}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <Filename>{{.CryptoCertFile}}</Filename>\r\n                    <Password></Password>\r\n                    <PasswordAlias>off</PasswordAlias>\r\n                    <Alias></Alias>\r\n                    <IgnoreExpiration>off</IgnoreExpiration>\r\n                </CryptoCertificate>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filec := &embedded.EmbeddedFile{
		Filename:    "dp-crypto-ident-cred-modify.tmpl",
		FileModTime: time.Unix(1574239758, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:modify-config>\r\n                <CryptoIdentCred name=\"{{.Name}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <Key>{{- .Key}}</Key>\r\n                    <Certificate>{{- .Cert}}</Certificate>\r\n                    {{- range .CaCerts}}\r\n                    {{- $ca:=.}}\r\n                    <CA>{{- $ca}}</CA>\r\n                    {{- end}}\r\n                </CryptoIdentCred>\r\n            </ma:modify-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filed := &embedded.EmbeddedFile{
		Filename:    "dp-crypto-ident-cred.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <CryptoIdentCred name=\"{{ .Name }}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <Key>{{.CryptoKeyName}}</Key>\r\n                    <Certificate>{{.CryptoCertName}}</Certificate>\r\n                    <CA>{{.CaName}}</CA>\r\n                </CryptoIdentCred>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>"),
	}
	filee := &embedded.EmbeddedFile{
		Filename:    "dp-crypto-key.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <CryptoKey name=\"{{.CryptoKeyName}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <Filename>{{.CryptoKeyFile}}</Filename>\r\n                    <Password></Password>\r\n                    <PasswordAlias>off</PasswordAlias>\r\n                    <Alias></Alias>\r\n                </CryptoKey>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filef := &embedded.EmbeddedFile{
		Filename:    "dp-crypto-val-cred.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request>\r\n            <ma:set-config>\r\n                <CryptoValCred name=\"{{ .CryptoValCredName }}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <Certificate></Certificate>\r\n                    <CertValidationMode>pkix</CertValidationMode>\r\n                    <UseCRL>off</UseCRL>\r\n                    <RequireCRL>off</RequireCRL>\r\n                    <CRLDPHandling>ignore</CRLDPHandling>\r\n                    <InitialPolicySet></InitialPolicySet>\r\n                    <ExplicitPolicy>off</ExplicitPolicy>\r\n                    <CheckDates>on</CheckDates>\r\n                </CryptoValCred>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	fileg := &embedded.EmbeddedFile{
		Filename:    "dp-dns-modify.tmpl",
		FileModTime: time.Unix(1574239758, 0),

		Content: string("<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"default\">\r\n            <ma:modify-config>\r\n                <DNSNameService>\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary></UserSummary>\r\n                    {{- range .SearchDomains }}\r\n                        {{- $domain := .}}\r\n                    <SearchDomains>\r\n                        <SearchDomain>{{- $domain}}</SearchDomain>\r\n                    </SearchDomains>\r\n                    {{- end}}\r\n                    {{- range .NameServers }}\r\n                    <NameServers>\r\n                        {{- $dnsipaddr := .}}\r\n                        <IPAddress>{{- $dnsipaddr}}</IPAddress>\r\n                        <UDPPort>53</UDPPort>\r\n                        <TCPPort>53</TCPPort>\r\n                        <MaxRetries>3</MaxRetries>\r\n                    </NameServers>\r\n                    {{- end}}\r\n                    <IPPreference>4</IPPreference>\r\n                    <ForceIPPreference>off</ForceIPPreference>\r\n                    <LoadBalanceAlgorithm>round-robin</LoadBalanceAlgorithm>\r\n                    <MaxRetries>3</MaxRetries>\r\n                    <Timeout>300</Timeout>\r\n                </DNSNameService>\r\n            </ma:modify-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	fileh := &embedded.EmbeddedFile{
		Filename:    "dp-domain.tmpl",
		FileModTime: time.Unix(1574129437, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request>\r\n            <ma:set-config>\r\n                <Domain name=\"{{.DatapowerDomain}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>api connect domain</UserSummary>\r\n                    <NeighborDomain>default</NeighborDomain>\r\n                </Domain>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filei := &embedded.EmbeddedFile{
		Filename:    "dp-gateway-peering-manager.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <GatewayPeeringManager name=\"{{.Name}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>APIC gw peering manager</UserSummary>\r\n                    <APIConnectGatewayService>{{.GwdPeering}}</APIConnectGatewayService>\r\n                    <RateLimit>{{.RateLimitPeering}}</RateLimit>\r\n                    <Subscription>{{.SubscriptionPeering}}</Subscription>\r\n                </GatewayPeeringManager>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filej := &embedded.EmbeddedFile{
		Filename:    "dp-gateway-peering.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <GatewayPeering name=\"{{.Name}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>{{.Summary | default \"APIC gateway peering\"}}</UserSummary>\r\n                    <LocalAddress>{{.LocalAddress}}</LocalAddress>\r\n                    <LocalPort>{{.LocalPort}}</LocalPort>\r\n                    <MonitorPort>{{.MonitorPort}}</MonitorPort>\r\n                    <EnablePeerGroup>{{.PeerGroupSwitch | default \"on\"}}</EnablePeerGroup>\r\n                    <Peers>{{.Peer1}}</Peers>\r\n                    <Peers>{{.Peer2}}</Peers>\r\n                    <Priority>{{.Priority}}</Priority>\r\n                    <EnableSSL>{{.SSLSwitch}}</EnableSSL>\r\n                    <Idcred>{{.CryptoIdentCreds}}</Idcred>\r\n                    <Valcred>{{.CryptoValCreds}}</Valcred>\r\n                    <PersistenceLocation>{{.PersistenceLocation | default \"memory\"}}</PersistenceLocation>\r\n                    <LocalDirectory>{{.LocalDirectory}}</LocalDirectory>\r\n                </GatewayPeering>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filek := &embedded.EmbeddedFile{
		Filename:    "dp-host-alias.tmpl",
		FileModTime: time.Unix(1574094066, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"default\">\r\n            <ma:set-config>\r\n                <HostAlias name=\"{{.Alias}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>host alias</UserSummary>\r\n                    <IPAddress>{{.IPAddress}}</IPAddress>\r\n                </HostAlias>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filel := &embedded.EmbeddedFile{
		Filename:    "dp-ntp-service.tmpl",
		FileModTime: time.Unix(1574069063, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"default\">\r\n            <ma:set-config>\r\n                <NTPService>\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary></UserSummary>\r\n                    <RemoteServer>{{.NTPServer | default \"pool.ntp.org\"}}</RemoteServer>\r\n                    <RefreshInterval>900</RefreshInterval>\r\n                </NTPService>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filem := &embedded.EmbeddedFile{
		Filename:    "dp-save-config.tmpl",
		FileModTime: time.Unix(1574069063, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:do-action>\r\n                <SaveConfig></SaveConfig>\r\n            </ma:do-action>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filen := &embedded.EmbeddedFile{
		Filename:    "dp-set-file.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-file name=\"{{.Directory}}:///{{.FileName}}\">{{ b64enc .FileContent}}</ma:set-file>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	fileo := &embedded.EmbeddedFile{
		Filename:    "dp-ssl-client-profile.tmpl",
		FileModTime: time.Unix(1575305095, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <SSLClientProfile name=\"{{.Name}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>gwd client profile</UserSummary>\r\n                    <Protocols>\r\n                        <SSLv3>off</SSLv3>\r\n                        <TLSv1d0>off</TLSv1d0>\r\n                        <TLSv1d1>off</TLSv1d1>\r\n                        <TLSv1d2>on</TLSv1d2>\r\n                    </Protocols>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_256_CBC_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_256_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_256_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_256_CBC_SHA256</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>RSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Idcred>{{.CryptoIdentCreds}}</Idcred>\r\n                    <ValidateServerCert>off</ValidateServerCert>\r\n                    <Valcred>{{.CryptoValCreds}}</Valcred>\r\n                    <Caching>on</Caching>\r\n                    <CacheTimeout>300</CacheTimeout>\r\n                    <CacheSize>100</CacheSize>\r\n                    <SSLClientFeatures>\r\n                        <use-sni>on</use-sni>\r\n                        <permit-insecure-servers>off</permit-insecure-servers>\r\n                        <compression>off</compression>\r\n                    </SSLClientFeatures>\r\n                    <EllipticCurves>secp521r1</EllipticCurves>\r\n                    <EllipticCurves>secp384r1</EllipticCurves>\r\n                    <EllipticCurves>secp256k1</EllipticCurves>\r\n                    <EllipticCurves>secp256r1</EllipticCurves>\r\n                    <UseCustomSNIHostname>no</UseCustomSNIHostname>\r\n                    <CustomSNIHostname></CustomSNIHostname>\r\n                    <ValidateHostname>off</ValidateHostname>\r\n                    <HostnameValidationFlags>\r\n                        <X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT>off</X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT>\r\n                        <X509_CHECK_FLAG_NO_WILDCARDS>off</X509_CHECK_FLAG_NO_WILDCARDS>\r\n                        <X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS>off</X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS>\r\n                        <X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS>off</X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS>\r\n                        <X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS>off</X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS>\r\n                    </HostnameValidationFlags>\r\n                    <HostnameValidationFailOnError>off</HostnameValidationFailOnError>\r\n                </SSLClientProfile>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filep := &embedded.EmbeddedFile{
		Filename:    "dp-ssl-server-profile.tmpl",
		FileModTime: time.Unix(1575305095, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"{{.Domain}}\">\r\n            <ma:set-config>\r\n                <SSLServerProfile name=\"{{.Name}}\">\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary>Gwd server profile</UserSummary>\r\n                    <Protocols>\r\n                        <SSLv3>off</SSLv3>\r\n                        <TLSv1d0>off</TLSv1d0>\r\n                        <TLSv1d1>off</TLSv1d1>\r\n                        <TLSv1d2>on</TLSv1d2>\r\n                    </Protocols>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_256_CBC_SHA384</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_256_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_256_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_256_GCM_SHA384</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_256_CBC_SHA256</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_256_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_128_GCM_SHA256</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_128_CBC_SHA256</Ciphers>\r\n                    <Ciphers>RSA_WITH_AES_128_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_RSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>DHE_DSS_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Ciphers>RSA_WITH_3DES_EDE_CBC_SHA</Ciphers>\r\n                    <Idcred>{{.CryptoIdentCreds}}</Idcred>\r\n                    <RequestClientAuth>off</RequestClientAuth>\r\n                    <RequireClientAuth>off</RequireClientAuth>\r\n                    <ValidateClientCert>off</ValidateClientCert>\r\n                    <SendClientAuthCAList>on</SendClientAuthCAList>\r\n                    <Valcred>{{.CryptoValCreds}}</Valcred>\r\n                    <Caching>on</Caching>\r\n                    <CacheTimeout>300</CacheTimeout>\r\n                    <CacheSize>20</CacheSize>\r\n                    <SSLOptions>\r\n                        <max-duration>off</max-duration>\r\n                        <max-renegotiation>off</max-renegotiation>\r\n                    </SSLOptions>\r\n                    <MaxSSLDuration>60</MaxSSLDuration>\r\n                    <NumberOfRenegotiationAllowed>0</NumberOfRenegotiationAllowed>\r\n                    <ProhibitResumeOnReneg>off</ProhibitResumeOnReneg>\r\n                    <Compression>off</Compression>\r\n                    <AllowLegacyRenegotiation>off</AllowLegacyRenegotiation>\r\n                    <PreferServerCiphers>on</PreferServerCiphers>\r\n                    <EllipticCurves>secp521r1</EllipticCurves>\r\n                    <EllipticCurves>secp384r1</EllipticCurves>\r\n                    <EllipticCurves>secp256k1</EllipticCurves>\r\n                    <EllipticCurves>secp256r1</EllipticCurves>\r\n                </SSLServerProfile>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>"),
	}
	fileq := &embedded.EmbeddedFile{
		Filename:    "dp-system-settings.tmpl",
		FileModTime: time.Unix(1574069063, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n                   xmlns:ma=\"http://www.datapower.com/schemas/management\">\r\n    <SOAP-ENV:Header/>\r\n    <SOAP-ENV:Body>\r\n        <ma:request domain=\"default\">\r\n            <ma:set-config>\r\n                <SystemSettings>\r\n                    <mAdminState>enabled</mAdminState>\r\n                    <UserSummary></UserSummary>\r\n                    <SystemName>{{.SystemName}}</SystemName>\r\n                </SystemSettings>\r\n            </ma:set-config>\r\n        </ma:request>\r\n    </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n"),
	}
	filer := &embedded.EmbeddedFile{
		Filename:    "extra-values.tmpl",
		FileModTime: time.Unix(1572973403, 0),

		Content: string("{{- $a := list 0 . }}\r\n{{- template \"map2yml\" $a }}"),
	}
	files := &embedded.EmbeddedFile{
		Filename:    "gateway-k8s.tmpl",
		FileModTime: time.Unix(1569941485, 0),

		Content: string("{{$subsys := .SubsysName}}\n\n{{$pathsep := .OsEnv.PathSeparator}}\n{{$apicup := .OsEnv.BinApicup}}\n\n{{ template \"scriptheader\" .OsEnv }}\n\n{{$apicup}} subsys create {{$subsys}} gateway --k8s\n\n{{if len .ExtraValuesFile}}\n{{$apicup}} subsys set {{$subsys}} extra-values-file=..{{$pathsep}}{{.ExtraValuesFile}}\n{{end}}\n\n{{$apicup}} subsys set {{$subsys}} api-gateway={{.ApiGateway}}\n{{$apicup}} subsys set {{$subsys}} apic-gw-service={{.ApicGwService}}\n\n{{$apicup}} subsys set {{$subsys}} namespace={{.Namespace}}\n\n{{if len .RegistryUrl}}\n{{$apicup}} subsys set {{$subsys}} registry={{.RegistryUrl}}\n{{end}}\n{{if len .RegistrySecret}}\n{{$apicup}} subsys set {{$subsys}} registry-secret={{.RegistrySecret}}\n{{end}}\n\n{{$apicup}} subsys set {{$subsys}} image-pull-policy={{.ImagePullPolicy | default \"IfNotPresent\"}}\n\n{{$apicup}} subsys set {{$subsys}} replica-count={{.ReplicaCount | default 3}}\n{{$apicup}} subsys set {{$subsys}} max-cpu={{.MaxCpu | default 4}}\n{{$apicup}} subsys set gwy max-memory-gb={{.MaxMemoryGb | default 6}}\n\n{{$apicup}} subsys set {{$subsys}} storage-class={{.StorageClass}}\n\n{{$apicup}} subsys set {{$subsys}} v5-compatibility-mode={{.V5CompatibilityMode | default false}}\n{{$apicup}} subsys set {{$subsys}} enable-tms={{.EnableTms}}\n{{$apicup}} subsys set {{$subsys}} tms-peering-storage-size-gb={{.TmsPeeringStorageSizeGb | default 10}}\n{{$apicup}} subsys set {{$subsys}} enable-high-performance-peering={{.EnableHighPerformancePeering | quote}}\n\n{{$apicup}} subsys set {{$subsys}} license-version={{.LicenseVersion}}\n{{$apicup}} subsys set {{$subsys}} mode={{.Mode}}\n{{$apicup}} subsys set {{$subsys}} ingress-type={{.IngressType | default \"ingress\"}}\n"),
	}
	filet := &embedded.EmbeddedFile{
		Filename:    "helpers.tmpl",
		FileModTime: time.Unix(1569941485, 0),

		Content: string("{{/* write out script header. pass OsEnv as scope */}}\n{{ define \"scriptheader\"}}\n    {{ if .IsLinux }}\n        #!/bin/bash\n        # run this script from project directory\n        set -x\n    {{else}}\n        rem run this script from project directory\n    {{end}}\n{{ end }}\n\n{{ define \"scriptheader1\"}}\n    {{ if .IsLinux }}\n        #!/bin/bash\n        # run this script from current directory\n        set -x\n    {{else}}\n        rem run this script from current directory\n    {{end}}\n{{ end }}\n\n{{- /* print out map as yml... pass list as scope: [depth, map] */}}\n{{- define \"map2yml\" }}\n    {{- $d := first . }}\n    {{- $m := last . }}\n    {{- range $k, $v := $m }}\n        {{- $vt := typeOf $v }}\n        {{- if eq $vt \"map[string]interface {}\" }}\n            {{- /*(key-depth -- {{$d}})*/}}\n            {{- $s := int $d}}\n            {{- nindent $s $k}}:\n            {{- $d1 := add1 $d}}\n            {{- $a := list $d1 $v}}\n            {{- template \"map2yml\" $a }}\n        {{- else}}\n            {{- /*(key-val-depth -- {{$d}})*/}}\n            {{- $s := int $d }}\n            {{- nindent $s $k }}: {{$v}}\n        {{- end}}\n    {{- end }}\n{{- end }}\n"),
	}
	fileu := &embedded.EmbeddedFile{
		Filename:    "keypair.tmpl",
		FileModTime: time.Unix(1573621390, 0),

		Content: string("{{$pathsep := .OsEnv.PathSeparator}}\r\n{{$shellext := .OsEnv.ShellExt}}\r\n\r\n{{ template \"scriptheader1\" .OsEnv }}\r\n\r\n{{ if .OsEnv.IsWindows }}\r\n    IF EXIST {{.CertSpec.KeyFile}} (\r\necho Private key file {{.CertSpec.KeyFile}} already exists... Skip key pair and csr generation...\r\n    ) ELSE (\r\nopenssl req -config {{.CertSpec.CsrConf}} -out {{.CertSpec.CertFile}}.csr -outform PEM -new -keyout {{.CertSpec.KeyFile}}\r\nopenssl req -x509 -config {{.CertSpec.CsrConf}} -out {{.CertSpec.CertFile}}.self -outform PEM -new -key {{.CertSpec.KeyFile}}\r\n    )\r\n{{ else }}\r\n    if [[ -f {{.CertSpec.KeyFile}} ]]; then\r\necho Private key file {{.CertSpec.KeyFile}} already exists... Skip key pair and csr generation...\r\n    else\r\nopenssl req -config {{.CertSpec.CsrConf}} -out {{.CertSpec.CertFile}}.csr -outform PEM -new -keyout {{.CertSpec.KeyFile}}\r\nopenssl req -x509 -config {{.CertSpec.CsrConf}} -out {{.CertSpec.CertFile}}.self -outform PEM -new -key {{.CertSpec.KeyFile}}\r\n    fi\r\n{{ end }}\r\n"),
	}
	filev := &embedded.EmbeddedFile{
		Filename:    "management-k8s.tmpl",
		FileModTime: time.Unix(1572488230, 0),

		Content: string("{{ $subsys := .SubsysName }}\r\n\r\n{{$pathsep := .OsEnv.PathSeparator}}\r\n{{$apicup := .OsEnv.BinApicup}}\r\n\r\n{{ template \"scriptheader\" .OsEnv }}\r\n\r\n{{$apicup}} subsys create {{ $subsys }} management --k8s\r\n\r\n{{$apicup}} subsys set {{ $subsys }} mode={{ .Mode }}\r\n\r\n{{$apicup}} subsys set {{ $subsys }} ingress-type={{ .IngressType }}\r\n{{$apicup}} subsys set {{ $subsys }} namespace={{ .Namespace }}\r\n{{$apicup}} subsys set {{ $subsys }} registry={{ .RegistryUrl }}\r\n{{$apicup}} subsys set {{ $subsys }} registry-secret={{ .RegistrySecret }}\r\n{{$apicup}} subsys set {{ $subsys }} storage-class={{ .StorageClass }}\r\n\r\n{{ if len .ExtraValuesFile -}}\r\n    {{$apicup}} subsys set {{ $subsys }} extra-values-file=..{{$pathsep}}{{ .ExtraValuesFile | quote }}\r\n{{ end -}}\r\n\r\n{{ with .CassandraBackup }}\r\n    {{ if .BackupProtocol | lower | eq \"sftp\" -}}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-protocol=sftp\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-host={{ .BackupHost }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-port={{ .BackupPort | default 22 }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-user={{ .BackupAuthUser }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-pass={{ .BackupAuthPass }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-path={{ .BackupPath }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-schedule={{ .BackupSchedule | quote }}\r\n    {{ else if .BackupProtocol | lower | eq \"objstore\" -}}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-protocol=objstore\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-host={{ .ObjstoreEndpointRegion }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-user={{ .ObjstoreS3SecretKeyId }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-pass={{ .ObjstoreS3SecretAccessKey }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-path={{ .ObjstoreBucketSubfolder }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-schedule={{ .BackupSchedule | quote }}\r\n    {{- end }}\r\n{{- end }}\r\n\r\n{{$apicup}} subsys set {{ $subsys }} cassandra-max-memory-gb={{ .CassandraMaxMemoryGb | default 9 }}\r\n{{$apicup}} subsys set {{ $subsys }} cassandra-cluster-size={{ .CassandraClusterSize }}\r\n{{$apicup}} subsys set {{ $subsys }} cassandra-volume-size-gb={{ .CassandraVolumeSizeGb }}\r\n{{ if .ExternalCassandraHost }}\r\n    {{$apicup}} subsys set {{ $subsys }} external-cassandra-host={{ .ExternalCassandraHost }}\r\n{{ end }}\r\n\r\n{{$apicup}} subsys set {{ $subsys }} create-crd={{ .CreateCrd | default true }}\r\n\r\n{{$apicup}} subsys set {{ $subsys }} platform-api={{ .PlatformApi }}\r\n{{$apicup}} subsys set {{ $subsys }} api-manager-ui={{ .ApiManagerUi }}\r\n{{$apicup}} subsys set {{ $subsys }} cloud-admin-ui={{ .CloudAdminUi }}\r\n{{$apicup}} subsys set {{ $subsys }} consumer-api={{ .ConsumerApi }}\r\n\r\n{{ if .CassandraEncryptionKeyFile }}\r\n    {{$apicup}} certs set {{ $subsys }} encryption-secret ..{{$pathsep}}{{ .CassandraEncryptionKeyFile }}\r\n{{ end }}"),
	}
	filew := &embedded.EmbeddedFile{
		Filename:    "management-vm.tmpl",
		FileModTime: time.Unix(1572488230, 0),

		Content: string("{{- $subsys := .SubsysName}}\r\n\r\n{{$pathsep := .OsEnv.PathSeparator}}\r\n{{$apicup := .OsEnv.BinApicup}}\r\n{{$islinux := .OsEnv.IsLinux}}\r\n\r\n{{ template \"scriptheader\" .OsEnv }}\r\n\r\n{{$apicup}} subsys create {{ $subsys }} management\r\n\r\n{{$apicup}} subsys set {{ $subsys }} mode={{ .Mode }}\r\n\r\n{{ with .CloudInit }}\r\n    {{- if len .CloudInitFile }}\r\n        {{$apicup}} subsys set {{ $subsys }} additional-cloud-init-file=..{{$pathsep}}{{ .CloudInitFile }}\r\n    {{- end }}\r\n{{ end }}\r\n\r\n{{$apicup}} subsys set {{ $subsys }} search-domain={{ join \",\" .SearchDomains | trim | quote }}\r\n\r\n{{ with .VmFirstBoot }}\r\n    {{$apicup}} subsys set {{ $subsys }} dns-servers={{ join \",\" .DnsServers | trim | quote }}\r\n\r\n    {{- if $islinux }}\r\n        {{$apicup}} subsys set {{ $subsys }} default-password={{ .VmwareConsolePasswordHash | squote }}\r\n    {{- else }}\r\n        {{$apicup}} subsys set {{ $subsys }} default-password={{ .VmwareConsolePasswordHash | quote }}\r\n    {{- end }}\r\n\r\n    {{ with .IpRanges }}\r\n        {{- if len .PodNetwork }}\r\n            {{$apicup}} subsys set {{ $subsys }} k8s-pod-network={{ .PodNetwork | quote }}\r\n        {{- end}}\r\n        {{- if len .ServiceNetwork }}\r\n            {{$apicup}} subsys set {{ $subsys }} k8s-service-network={{ .ServiceNetwork | quote }}\r\n        {{- end }}\r\n    {{ end }}\r\n\r\n    {{ range .Hosts}}\r\n        {{- $h := .}}\r\n        {{$apicup}} hosts create {{$subsys}} {{$h.Name}} {{$h.HardDiskPassword}}\r\n        {{$apicup}} iface create {{$subsys}} {{$h.Name}} {{$h.Device}} {{$h.IpAddress}}/{{$h.SubnetMask}} {{$h.Gateway}}\r\n    {{ end}}\r\n\r\n{{ end}}\r\n\r\n{{$apicup}} subsys set {{ $subsys }} ssh-keyfiles=..{{$pathsep}}{{ .SshPublicKeyFile }}\r\n\r\n{{ with .CassandraBackup }}\r\n    {{- if .BackupProtocol | lower | eq \"sftp\" }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-protocol=sftp\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-host={{ .BackupHost }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-port={{ .BackupPort | default 22 }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-user={{ .BackupAuthUser }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-pass={{ .BackupAuthPass }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-path={{ .BackupPath }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-schedule={{ .BackupSchedule | quote }}\r\n    {{- else if .BackupProtocol | lower | eq \"objstore\" }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-protocol=objstore\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-host={{ .ObjstoreEndpointRegion }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-user={{ .ObjstoreS3SecretKeyId }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-auth-pass={{ .ObjstoreS3SecretAccessKey }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-path={{ .ObjstoreBucketSubfolder }}\r\n        {{$apicup}} subsys set {{ $subsys }} cassandra-backup-schedule={{ .BackupSchedule | quote }}\r\n    {{- end }}\r\n{{ end }}\r\n\r\n{{$apicup}} subsys set {{ $subsys }} platform-api={{ .PlatformApi }}\r\n{{$apicup}} subsys set {{ $subsys }} api-manager-ui={{ .ApiManagerUi }}\r\n{{$apicup}} subsys set {{ $subsys }} cloud-admin-ui={{ .CloudAdminUi }}\r\n{{$apicup}} subsys set {{ $subsys }} consumer-api={{ .ConsumerApi }}\r\n\r\n{{ if .CassandraEncryptionKeyFile }}\r\n    {{$apicup}} certs set {{ $subsys }} encryption-secret ..{{$pathsep}}{{ .CassandraEncryptionKeyFile }}\r\n{{ end }}"),
	}
	filex := &embedded.EmbeddedFile{
		Filename:    "portal-k8s.tmpl",
		FileModTime: time.Unix(1569941485, 0),

		Content: string("{{ $subsys := .SubsysName}}\n\n{{$pathsep := .OsEnv.PathSeparator}}\n{{$apicup := .OsEnv.BinApicup}}\n\n{{ template \"scriptheader\" .OsEnv }}\n\n{{$apicup}} subsys create {{$subsys}} portal --k8s\n\n{{$apicup}} subsys set {{$subsys}} mode={{.Mode}}\n{{$apicup}} subsys set {{$subsys}} extra-values-file=..{{$pathsep}}{{.ExtraValuesFile | quote}}\n\n{{$apicup}} subsys set {{$subsys}} ingress-type={{.IngressType}}\n{{$apicup}} subsys set {{$subsys}} namespace={{ .Namespace }}\n{{$apicup}} subsys set {{$subsys}} storage-class={{ .StorageClass }}\n\n{{$apicup}} subsys set {{$subsys}} registry={{ .RegistryUrl }}\n{{$apicup}} subsys set {{$subsys}} registry-secret={{ .RegistrySecret }}\n\n{{$apicup}} subsys set {{$subsys}} portal-admin={{ .PortalAdmin }}\n{{$apicup}} subsys set {{$subsys}} portal-www={{ .PortalWWW }}\n\n{{$apicup}} subsys set {{$subsys}} www-storage-size-gb={{ .WwwStorageSizeGb | default 5 }}\n{{$apicup}} subsys set {{$subsys}} backup-storage-size-gb={{ .BackupStorageSizeGb | default 5 }}\n{{$apicup}} subsys set {{$subsys}} db-storage-size-gb={{ .DbStorageSizeGb | default 12 }}\n{{$apicup}} subsys set {{$subsys}} db-logs-storage-size-gb={{ .DbLogsStorageSizeGb | default 12 }}\n{{/*apicup subsys set {{$subsys}} admin-storage-size-gb={{ .AdminStorageSizeGb | default 1 }}*/}}\n\n{{ with .SiteBackup }}\n{{ if .BackupProtocol | lower | eq \"sftp\" }}\n{{$apicup}} subsys set {{$subsys}} site-backup-protocol=sftp\n{{$apicup}} subsys set {{$subsys}} site-backup-host={{.BackupHost}}\n{{$apicup}} subsys set {{$subsys}} site-backup-port={{.BackupPort | default 22}}\n{{$apicup}} subsys set {{$subsys}} site-backup-auth-user={{.BackupAuthUser}}\n{{$apicup}} subsys set {{$subsys}} site-backup-auth-pass={{.BackupAuthPass}}\n{{$apicup}} subsys set {{$subsys}} site-backup-path={{.BackupPath }}\n{{$apicup}} subsys set {{$subsys}} site-backup-schedule={{.BackupSchedule | quote}}\n{{ else if .BackupProtocol | lower | eq \"objstore\" }}\n{{$apicup}} subsys set {{$subsys}} site-backup-protocol=objstore\n{{$apicup}} subsys set {{$subsys}} site-backup-host={{ .ObjstoreEndpointRegion }}\n{{$apicup}} subsys set {{$subsys}} site-backup-auth-user={{ .ObjstoreS3SecretKeyId }}\n{{$apicup}} subsys set {{$subsys}} site-backup-auth-pass={{ .ObjstoreS3SecretAccessKey }}\n{{$apicup}} subsys set {{$subsys}} site-backup-path={{ .ObjstoreBucketSubfolder }}\n{{$apicup}} subsys set {{$subsys}} site-backup-schedule={{ .BackupSchedule | quote }}\n{{ end }}\n{{ end }}"),
	}
	filey := &embedded.EmbeddedFile{
		Filename:    "portal-vm.tmpl",
		FileModTime: time.Unix(1569941484, 0),

		Content: string("{{$subsys := .SubsysName}}\n\n{{$pathsep := .OsEnv.PathSeparator}}\n{{$apicup := .OsEnv.BinApicup}}\n{{$islinux := .OsEnv.IsLinux}}\n\n{{ template \"scriptheader\" .OsEnv }}\n\n{{$apicup}} subsys create {{ $subsys }} portal\n{{$apicup}} subsys set {{ $subsys }} mode={{ .Mode }}\n\n{{ with .CloudInit }}\n{{ if len .CloudInitFile }}\n{{$apicup}} subsys set {{ $subsys }} additional-cloud-init-file=..{{$pathsep}}{{ .CloudInitFile }}\n{{ end }}\n{{ end }}\n\n{{$apicup}} subsys set {{ $subsys }} search-domain={{ join \",\" .SearchDomains | trim | quote }}\n\n{{$apicup}} subsys set {{ $subsys }} ssh-keyfiles=..{{$pathsep}}{{ .SshPublicKeyFile }}\n\n{{ with .VmFirstBoot }}\n{{$apicup}} subsys set {{ $subsys }} dns-servers={{ join \",\" .DnsServers | trim | quote }}\n\n{{ if $islinux }}\n{{$apicup}} subsys set {{ $subsys }} default-password={{ .VmwareConsolePasswordHash | squote }}\n{{ else}}\n{{$apicup}} subsys set {{ $subsys }} default-password={{ .VmwareConsolePasswordHash | quote }}\n{{end}}\n\n{{ with .IpRanges }}\n{{ if len .PodNetwork }}\n{{$apicup}} subsys set {{ $subsys }} k8s-pod-network={{ .PodNetwork | quote }}\n{{ end}}\n{{ if len .ServiceNetwork }}\n{{$apicup}} subsys set {{ $subsys }} k8s-service-network={{ .ServiceNetwork | quote }}\n{{ end}}\n{{ end}}\n\n{{range .Hosts}}\n{{$h := .}}\n{{$apicup}} hosts create {{$subsys}} {{$h.Name}} {{$h.HardDiskPassword}}\n{{$apicup}} iface create {{$subsys}} {{$h.Name}} {{$h.Device}} {{$h.IpAddress}}/{{$h.SubnetMask}} {{$h.Gateway}}\n{{ end}}\n\n{{ end}}\n\n{{ with .SiteBackup }}\n    {{ if .BackupProtocol | lower | eq \"sftp\" }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-protocol=sftp\n        {{$apicup}} subsys set {{ $subsys }} site-backup-host={{ .BackupHost }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-port={{ .BackupPort | default 22 }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-auth-user={{ .BackupAuthUser }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-auth-pass={{ .BackupAuthPass }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-path={{ .BackupPath }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-schedule={{ .BackupSchedule | quote }}\n    {{ else if .BackupProtocol | lower | eq \"objstore\" }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-protocol=objstore\n        {{$apicup}} subsys set {{ $subsys }} site-backup-host={{ .ObjstoreEndpointRegion }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-auth-user={{ .ObjstoreS3SecretKeyId }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-auth-pass={{ .ObjstoreS3SecretAccessKey }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-path={{ .ObjstoreBucketSubfolder }}\n        {{$apicup}} subsys set {{ $subsys }} site-backup-schedule={{ .BackupSchedule | quote }}\n    {{ end }}\n{{ end }}\n\n{{$apicup}} subsys set {{ $subsys }} portal-admin={{ .PortalAdmin }}\n{{$apicup}} subsys set {{ $subsys }} portal-www={{ .PortalWww }}\n"),
	}
	filez := &embedded.EmbeddedFile{
		Filename:    "soma.tmpl",
		FileModTime: time.Unix(1574201350, 0),

		Content: string("{{$pathsep := .OsEnv.PathSeparator}}\r\n{{$config := .Config}}\r\n{{$iswin := .OsEnv.IsWindows}}\r\n\r\n{{ template \"scriptheader1\" .OsEnv }}\r\n\r\n{{ if $iswin }}\r\n    set apicupcfg=apicupcfg.exe\r\n    IF EXIST ..\\apicupcfg.exe (\r\n        set apicupcfg=..\\apicupcfg.exe\r\n    )\r\n{{else}}\r\n    apicupcfg=apicupcfg\r\n    if [[ -f ../apicupcfg ]]; then\r\n        apicupcfg=../apicupcfg\r\n    fi\r\n{{ end }}\r\n\r\n{{range .SetFileSpecs}}\r\n    {{$spec := .}}\r\n\r\n    {{ if $iswin }}\r\n        %apicupcfg% -config ..\\{{$config}} -soma -setfile {{$spec.File}} -dpdir {{$spec.Dpdir}} -dpfile {{$spec.Dpfile}} -dpdomain {{$spec.Dpdomain}} -auth {{$spec.Auth}} -url {{$spec.Url}}\r\n    {{else}}\r\n        $apicupcfg -config ../{{$config}} -soma -setfile {{$spec.File}} -dpdir {{$spec.Dpdir}} -dpfile {{$spec.Dpfile}} -dpdomain {{$spec.Dpdomain}} -auth {{$spec.Auth}} -url {{$spec.Url}}\r\n    {{ end }}\r\n\r\n{{end}}\r\n\r\n{{range .ReqSpecs}}\r\n    {{$spec := .}}\r\n\r\n    {{ if $iswin }}\r\n        %apicupcfg% -config ..\\{{$config}} -soma -req {{$spec.Req}} -auth {{$spec.Auth}} -url {{$spec.Url}}\r\n    {{else}}\r\n        $apicupcfg -config ../{{$config}} -soma -req {{$spec.Req}} -auth {{$spec.Auth}} -url {{$spec.Url}}\r\n    {{end}}\r\n\r\n{{end}}"),
	}
	file10 := &embedded.EmbeddedFile{
		Filename:    "subsys-certs.tmpl",
		FileModTime: time.Unix(1573373916, 0),

		Content: string("{{$pathsep := .OsEnv.PathSeparator}}\r\n{{$apicup := .OsEnv.BinApicup}}\r\n\r\n{{ template \"scriptheader\" .OsEnv }}\r\n\r\n{{ range .CertSpecs}}\r\n    {{ $certSpec := .}}\r\n    {{$apicup}} certs set {{ $certSpec.SubsysName}} {{$certSpec.CertName}} ..{{$pathsep}}{{$certSpec.CertSubdir}}{{$pathsep}}{{$certSpec.CertFile}} ..{{$pathsep}}{{$certSpec.KeySubdir}}{{$pathsep}}{{$certSpec.KeyFile}} ..{{$pathsep}}{{$certSpec.CaSubdir}}{{$pathsep}}{{$certSpec.CaFile}}\r\n{{ end }}\r\n"),
	}
	file11 := &embedded.EmbeddedFile{
		Filename:    "subsys-config-k8s.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("{\r\n    \"InstallType\": \"k8s\",\r\n    \"Version\": {{ .Version | default \"2018.4.1.x\" | quote }},\r\n    \"Tag\": \"tag\",\r\n\r\n    \"Mode\": {{ .Mode | default \"dev|standard\" | quote }},\r\n\r\n    \"Namespace\": {{ .Namespace | default \"apic\" | quote }},\r\n    \"RegistryUrl\": \"container-image-registry-url\",\r\n    \"RegistrySecret\": \"container-image-registry-secret\",\r\n    \"IngressType\": \"ingress|route\",\r\n    \"StorageClass\": \"gp2|etc\",\r\n\r\n    \"Certs\": {\r\n        \"DnFields\": [\"O=APIC|match ca reqs\",\"C=US|match ca reqs\"],\r\n        \"K8sNamespace\": {{ .Namespace | default \"apic\" | quote }},\r\n        \"CaFile\": \"ca-chain-root-last.crt\",\r\n\r\n        \"Certbot\": {\r\n            \"CertDir\": \"letsencrypt/live/my.domain.com\",\r\n            \"Cert\": \"cert.pem\",\r\n            \"Key\": \"privkey.pem\",\r\n            \"CaChain\": \"chain.pem\"\r\n        },\r\n\r\n        \"SharedEndpointTrust\": false,\r\n\r\n        \"PublicUserFacingCerts\": true,\r\n        \"PublicCerts\": false,\r\n        \"CommonCerts\": false\r\n    },\r\n\r\n    \"Management\": {\r\n        \"SubsysName\": \"mgmt\",\r\n        \"ExtraValuesFile\": \"mgmt-values.yaml\",\r\n        \"ExtraValues\": {},\r\n\r\n        \"CassandraBackup\": {\r\n            \"BackupProtocol\": \"sftp|objstore\",\r\n            \"BackupAuthUser\": \"admin\",\r\n            \"BackupAuthPass\": \"secret\",\r\n            \"BackupHost\": \"backup.my.domain.com\",\r\n            \"BackupPort\": 1022,\r\n            \"BackupPath\": \"/backup\",\r\n            \"ObjstoreS3SecretKeyId\": \"\",\r\n            \"ObjstoreS3SecretAccessKey\": \"\",\r\n            \"ObjstoreEndpointRegion\": \"\",\r\n            \"ObjstoreBucketSubfolder\": \"\",\r\n            \"BackupEncoding\": \"min(0-59) hour(0-23) dayofmonth(1-31) month(1-12) dayofweek(0-6)\",\r\n            \"BackupSchedule\": \"0 0 * * 0\"\r\n        },\r\n\r\n        \"CassandraMaxMemoryGb\": 9,\r\n        \"CassandraVolumeSizeGb\": 50,\r\n        \"CassandraClusterSize\": 3,\r\n        \"ExternalCassandraHost\": \"ext.my.domain.com\",\r\n        \"CreateCrd\": true,\r\n\r\n        \"CassandraEncryptionKeyFile\": \"encryption-secret.bin\",\r\n\r\n        \"PlatformApi\": \"api.my.domain.com\",\r\n        \"ApiManagerUi\": \"apim.my.domain.com\",\r\n        \"CloudAdminUi\": \"cm.my.domain.com\",\r\n        \"ConsumerApi\": \"consumer.my.domain.com\"\r\n    },\r\n\r\n    \"Analytics\": {\r\n        \"SubsysName\": \"analyt\",\r\n        \"ExtraValuesFile\": \"analyt-values.yaml\",\r\n        \"ExtraValues\": {},\r\n\r\n        \"CoordinatingMaxMemoryGb\": 12,\r\n        \"DataMaxMemoryGb\": 12,\r\n        \"DataStorageSizeGb\": 200,\r\n        \"MasterMaxMemoryGb\": 12,\r\n        \"MasterStorageSizeGb\": 5,\r\n\r\n        \"EnableMessageQueue\": false,\r\n\r\n        \"EsStorageClass\": \"\",\r\n        \"MqStorageClass\": \"\",\r\n\r\n        \"AnalyticsIngestionEndpoint\": \"ai.my.domain.com\",\r\n        \"AnalyticsClientEndpoint\": \"ac.my.domain.com\"\r\n    },\r\n\r\n    \"Portal\": {\r\n        \"SubsysName\": \"ptl\",\r\n\r\n        \"ExtraValuesFile\": \"ptl-values.yaml\",\r\n        \"ExtraValues\": {},\r\n\r\n        \"SiteBackup\": {\r\n            \"BackupProtocol\": \"sftp|objstore\",\r\n            \"BackupAuthUser\": \"admin\",\r\n            \"BackupAuthPass\": \"secret\",\r\n            \"BackupHost\": \"backup.my.domain.com\",\r\n            \"BackupPort\": 1022,\r\n            \"BackupPath\": \"/backup\",\r\n            \"ObjstoreS3SecretKeyId\": \"\",\r\n            \"ObjstoreS3SecretAccessKey\": \"\",\r\n            \"ObjstoreEndpointRegion\": \"\",\r\n            \"ObjstoreBucketSubfolder\": \"\",\r\n            \"BackupEncoding\": \"min(0-59) hour(0-23) dayofmonth(1-31) month(1-12) dayofweek(0-6)\",\r\n            \"BackupSchedule\": \"0 0 * * 0\"\r\n        },\r\n\r\n        \"WwwStorageSizeGb\": 5,\r\n        \"BackupStorageSizeGb\": 5,\r\n        \"DbStorageSizeGb\": 12,\r\n\r\n        \"Fixed\": {\r\n            \"DbLogsStorageSizeGb\": 2,\r\n            \"AdminStorageSizeGb\": 1\r\n        },\r\n\r\n        \"PortalAdmin\": \"padmin.my.domain.com\",\r\n        \"PortalWWW\": \"portal.my.domain.com\"\r\n    },\r\n\r\n    \"Gateway\": {\r\n        \"SubsysName\": \"gwy\",\r\n        \"Mode\": \"dev\",\r\n\r\n        \"ExtraValuesFile\": \"gwy-values.yaml\",\r\n        \"ExtraValues\": {\r\n            \"datapower\": {\r\n                \"webGuiManagementState\": \"enabled\",\r\n                \"apiDebugProbe\": \"enabled\"\r\n            }\r\n        },\r\n\r\n        \"LicenseVersion\": \"Production|Development\",\r\n        \"ImagePullPolicy\": \"IfNotPresent\",\r\n\r\n        \"ReplicaCount\": 3,\r\n        \"MaxCpu\": 4,\r\n        \"MaxMemoryGb\": 6,\r\n\r\n        \"V5ComatabilityMode\": false,\r\n        \"EnableTms\": true,\r\n        \"TmsPeeringStorageSizeGb\": 10,\r\n        \"EnableHighPerformancePeering\": \"true\",\r\n\r\n        \"ApiGateway\": \"gw.my.domain.com\",\r\n        \"ApicGwService\": \"gwd.my.domain.com\"\r\n    }\r\n}"),
	}
	file12 := &embedded.EmbeddedFile{
		Filename:    "subsys-config-ova.tmpl",
		FileModTime: time.Unix(1573979694, 0),

		Content: string("{\r\n    \"InstallType\": \"ova\",\r\n    \"Version\": {{ .Version | default \"2018.4.1.x\" | quote }},\r\n    \"Tag\": \"tag\",\r\n\r\n    \"Mode\": {{ .Mode | default \"dev|standard\" | quote }},\r\n\r\n    \"SshPublicKeyFile\": \"/path/to/public/key/file\",\r\n\r\n    \"SearchDomains\": [\"my.domain.com\", \"domain.com\"],\r\n\r\n    \"VmFirstBoot\": {\r\n        \"DnsServers\": [\"dns-ip-1\",\"dns-ip-2\"],\r\n        \"VmwareConsolePasswordHash\": \"hash-output-b64\",\r\n\r\n        \"IpRanges\": {\r\n            \"PodNetwork\": \"172.16.0.0/16\",\r\n            \"ServiceNetwork\": \"172.17.0.0/16\"\r\n        }\r\n    },\r\n\r\n    \"CloudInit\": {\r\n        \"CloudInitFile\": \"cloud-init-file.yml\",\r\n        \"InitValues\": {\r\n            \"rsyslog\": {\r\n                \"remotes\": {\r\n                    \"syslog_server1\": \"syslog-collector-ip-1:514|601\",\r\n                    \"syslog_server2\": \"syslog-collector-ip-2:514|601\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    \"Certs\": {\r\n        \"DnFields\": [\"O=APIC|match ca reqs\",\"C=US|match ca reqs\"],\r\n        \"K8sNamespace\": \"default\",\r\n        \"CaFile\": \"ca-chain-root-last.crt\",\r\n\r\n        \"Certbot\": {\r\n            \"CertDir\": \"letsencrypt/live/my.domain.com\",\r\n            \"Cert\": \"cert.pem\",\r\n            \"Key\": \"privkey.pem\",\r\n            \"CaChain\": \"chain.pem\"\r\n        },\r\n\r\n        \"SharedEndpointTrust\": false,\r\n\r\n        \"PublicUserFacingCerts\": true,\r\n        \"PublicCerts\": false,\r\n        \"CommonCerts\": false\r\n    },\r\n\r\n    \"Management\": {\r\n        \"SubsysName\": \"mgmt\",\r\n\r\n        \"VmFirstBoot\": {\r\n            \"Hosts\": [\r\n                {\"Name\": \"m1.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\",\"Gateway\": \"gw-ip-address\"},\r\n                {\"Name\": \"m2.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"},\r\n                {\"Name\": \"m3.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"}\r\n            ]\r\n        },\r\n\r\n        \"CassandraBackup\": {\r\n            \"BackupProtocol\": \"sftp|objstore\",\r\n            \"BackupAuthUser\": \"admin\",\r\n            \"BackupAuthPass\": \"secret\",\r\n            \"BackupHost\": \"backup.my.domain.com\",\r\n            \"BackupPort\": 1022,\r\n            \"BackupPath\": \"/backup\",\r\n            \"ObjstoreS3SecretKeyId\": \"\",\r\n            \"ObjstoreS3SecretAccessKey\": \"\",\r\n            \"ObjstoreEndpointRegion\": \"\",\r\n            \"ObjstoreBucketSubfolder\": \"\",\r\n            \"BackupEncoding\": \"min(0-59) hour(0-23) dayofmonth(1-31) month(1-12) dayofweek(0-6)\",\r\n            \"BackupSchedule\": \"0 0 * * 0\"\r\n        },\r\n\r\n        \"CassandraEncryptionKeyFile\": \"encryption-secret.bin\",\r\n\r\n        \"PlatformApi\": \"platform.my.domain.com\",\r\n        \"ApiManagerUi\": \"ui.my.domain.com\",\r\n        \"CloudAdminUi\": \"cm.my.domain.com\",\r\n        \"ConsumerApi\": \"consumer.my.domain.com\"\r\n    },\r\n\r\n    \"Analytics\": {\r\n        \"SubsysName\": \"alt\",\r\n\r\n        \"VmFirstBoot\": {\r\n            \"Hosts\": [\r\n                {\"Name\": \"a1.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\",\"Gateway\": \"gw-ip-address\"},\r\n                {\"Name\": \"a2.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"},\r\n                {\"Name\": \"a3.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"}\r\n            ]\r\n        },\r\n\r\n        \"EnableMessageQueue\": false,\r\n\r\n        \"AnalyticsIngestion\": \"ai.my.domain.com\",\r\n        \"AnalyticsClient\": \"ac.my.domain.com\"\r\n    },\r\n\r\n    \"Portal\": {\r\n        \"SubsysName\": \"ptl\",\r\n\r\n        \"VmFirstBoot\": {\r\n            \"Hosts\": [\r\n                {\"Name\": \"p1.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\",\"Gateway\": \"gw-ip-address\"},\r\n                {\"Name\": \"p2.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"},\r\n                {\"Name\": \"p3.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                    \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"}\r\n            ]\r\n        },\r\n\r\n        \"SiteBackup\": {\r\n            \"BackupProtocol\": \"sftp|objstore\",\r\n            \"BackupAuthUser\": \"admin\",\r\n            \"BackupAuthPass\": \"secret\",\r\n            \"BackupHost\": \"backup.my.domain.com\",\r\n            \"BackupPort\": 1022,\r\n            \"BackupPath\": \"/backup\",\r\n            \"ObjstoreS3SecretKeyId\": \"\",\r\n            \"ObjstoreS3SecretAccessKey\": \"\",\r\n            \"ObjstoreEndpointRegion\": \"\",\r\n            \"ObjstoreBucketSubfolder\": \"\",\r\n            \"BackupEncoding\": \"min(0-59) hour(0-23) dayofmonth(1-31) month(1-12) dayofweek(0-6)\",\r\n            \"BackupSchedule\": \"0 2 * * *\"\r\n        },\r\n\r\n        \"PortalAdmin\": \"padmin.my.domain.com\",\r\n        \"PortalWww\": \"portal.my.domain.com\"\r\n    },\r\n\r\n    \"Gateway\": {\r\n        \"SubsysName\": \"gwy\",\r\n        \"Mode\": \"standard\",\r\n\r\n        \"SearchDomains\": [],\r\n        \"DnsServers\": [],\r\n\r\n        \"Hosts\": [\r\n            {\"Name\": \"dp1.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\",\"Gateway\": \"gw-ip-address\"},\r\n            {\"Name\": \"dp2.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"},\r\n            {\"Name\": \"dp3.my.domain.com\", \"HardDiskPassword\": \"password\", \"Device\": \"eth0\",\r\n                \"IpAddress\": \"ip-address\", \"SubnetMask\": \"dot.subnet.mask\", \"Gateway\": \"gw-ip-address\"}\r\n        ],\r\n\r\n        \"ApiGateway\": \"gw.my.domain.com\",\r\n        \"ApicGwService\": \"gwd.my.domain.com\",\r\n\r\n        \"DatapowerDomain\": \"apiconnect\",\r\n        \"DatapowerApiGatewayPort\": 9443\r\n    }\r\n}"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1575305637, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file2,  // "analytics-k8s.tmpl"
			file3,  // "analytics-vm.tmpl"
			file4,  // "cloud-init-vm.tmpl"
			file5,  // "combined-csr.tmpl"
			file6,  // "csr-client-auth.tmpl"
			file7,  // "csr-server-auth.tmpl"
			file8,  // "csr-server-client-eku.tmpl"
			file9,  // "dp-apic-gw-service.tmpl"
			filea,  // "dp-config-sequence.tmpl"
			fileb,  // "dp-crypto-certificate.tmpl"
			filec,  // "dp-crypto-ident-cred-modify.tmpl"
			filed,  // "dp-crypto-ident-cred.tmpl"
			filee,  // "dp-crypto-key.tmpl"
			filef,  // "dp-crypto-val-cred.tmpl"
			fileg,  // "dp-dns-modify.tmpl"
			fileh,  // "dp-domain.tmpl"
			filei,  // "dp-gateway-peering-manager.tmpl"
			filej,  // "dp-gateway-peering.tmpl"
			filek,  // "dp-host-alias.tmpl"
			filel,  // "dp-ntp-service.tmpl"
			filem,  // "dp-save-config.tmpl"
			filen,  // "dp-set-file.tmpl"
			fileo,  // "dp-ssl-client-profile.tmpl"
			filep,  // "dp-ssl-server-profile.tmpl"
			fileq,  // "dp-system-settings.tmpl"
			filer,  // "extra-values.tmpl"
			files,  // "gateway-k8s.tmpl"
			filet,  // "helpers.tmpl"
			fileu,  // "keypair.tmpl"
			filev,  // "management-k8s.tmpl"
			filew,  // "management-vm.tmpl"
			filex,  // "portal-k8s.tmpl"
			filey,  // "portal-vm.tmpl"
			filez,  // "soma.tmpl"
			file10, // "subsys-certs.tmpl"
			file11, // "subsys-config-k8s.tmpl"
			file12, // "subsys-config-ova.tmpl"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../../templates`, &embedded.EmbeddedBox{
		Name: `../../templates`,
		Time: time.Unix(1575305637, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"": dir1,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"analytics-k8s.tmpl":               file2,
			"analytics-vm.tmpl":                file3,
			"cloud-init-vm.tmpl":               file4,
			"combined-csr.tmpl":                file5,
			"csr-client-auth.tmpl":             file6,
			"csr-server-auth.tmpl":             file7,
			"csr-server-client-eku.tmpl":       file8,
			"dp-apic-gw-service.tmpl":          file9,
			"dp-config-sequence.tmpl":          filea,
			"dp-crypto-certificate.tmpl":       fileb,
			"dp-crypto-ident-cred-modify.tmpl": filec,
			"dp-crypto-ident-cred.tmpl":        filed,
			"dp-crypto-key.tmpl":               filee,
			"dp-crypto-val-cred.tmpl":          filef,
			"dp-dns-modify.tmpl":               fileg,
			"dp-domain.tmpl":                   fileh,
			"dp-gateway-peering-manager.tmpl":  filei,
			"dp-gateway-peering.tmpl":          filej,
			"dp-host-alias.tmpl":               filek,
			"dp-ntp-service.tmpl":              filel,
			"dp-save-config.tmpl":              filem,
			"dp-set-file.tmpl":                 filen,
			"dp-ssl-client-profile.tmpl":       fileo,
			"dp-ssl-server-profile.tmpl":       filep,
			"dp-system-settings.tmpl":          fileq,
			"extra-values.tmpl":                filer,
			"gateway-k8s.tmpl":                 files,
			"helpers.tmpl":                     filet,
			"keypair.tmpl":                     fileu,
			"management-k8s.tmpl":              filev,
			"management-vm.tmpl":               filew,
			"portal-k8s.tmpl":                  filex,
			"portal-vm.tmpl":                   filey,
			"soma.tmpl":                        filez,
			"subsys-certs.tmpl":                file10,
			"subsys-config-k8s.tmpl":           file11,
			"subsys-config-ova.tmpl":           file12,
		},
	})
}
